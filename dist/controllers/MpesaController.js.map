{"version":3,"file":"MpesaController.js","sourceRoot":"/","sources":["controllers/MpesaController.ts"],"names":[],"mappings":";;;;;AACA,kDAAyB;AAEzB,qDAAiD;AAEjD,MAAqB,eAAgB,SAAQ,+BAAc;IACzD,KAAK,CAAC,0BAA0B;QAC9B,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,IAAI,CAAC,IAA6B,CAAA;YAE/C,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC;gBAC/D,KAAK,EAAE;oBACL,mCAAmC,EAAE;wBACnC,iBAAiB,EAAE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,iBAAiB;wBAC1D,iBAAiB,EAAE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,iBAAiB;qBAC3D;iBACF;aACF,CAAC,CAAA;YAEF,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,IAAI,SAAS,EAAE,CAAC;gBACnD,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,IAAI,CAAC,EAAE,CAAC;oBAE1C,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,IAAI,QAAQ,CAAC,EAAE,KAAK,IAAI,GAAG,CAAC,CAAA;oBACjH,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,IAAI,oBAAoB,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAA;oBAC3H,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,IAAI,aAAa,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAA;oBAClH,MAAM,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC;wBACvC,KAAK,EAAE;4BACL,EAAE,EAAE,WAAW,CAAC,EAAE;yBACnB;wBACD,IAAI,EAAE;4BACJ,MAAM,EAAE,SAAS;4BACjB,MAAM;4BACN,aAAa,EAAE,OAAO;4BACtB,IAAI,EAAE,SAAS;4BACf,KAAK;4BACL,IAAI,EAAE,IAAA,eAAK,GAAE,CAAC,MAAM,EAAE;4BACtB,IAAI,EAAE;gCACJ,MAAM,EAAE;oCACN,cAAc,EAAE;wCACd,SAAS,EAAE,MAAM;qCAClB;iCACF;6BACF;yBACF;qBACF,CAAC,CAAA;gBACJ,CAAC;qBAAM,CAAC;oBAEN,MAAM,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC;wBACvC,KAAK,EAAE;4BACL,EAAE,EAAE,WAAW,CAAC,EAAE;yBACnB;wBACD,IAAI,EAAE;4BACJ,MAAM,EAAE,QAAQ;yBACjB;qBACF,CAAC,CAAA;gBACJ,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,4BAA4B,EAAE,CAAA;YACjE,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAA;YACvC,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC/B,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,8BAA8B;aACxC,CAAC,CAAA;QACJ,CAAC;IACH,CAAC;CACF;AA9DD,kCA8DC","sourcesContent":["import { MpesaCallbackResponse } from '@utils/mpesa/type'\nimport dayjs from 'dayjs'\n\nimport { BaseController } from './BaseController'\n\nexport default class MpesaController extends BaseController {\n  async handleMpesaDepositCallback() {\n    try {\n      const body = this.body as MpesaCallbackResponse\n      // check if transaction exist\n      const transaction = await this.app.prisma.transaction.findUnique({\n        where: {\n          checkoutRequestId_merchantRequestId: {\n            checkoutRequestId: body.Body.stkCallback.CheckoutRequestID,\n            merchantRequestId: body.Body.stkCallback.MerchantRequestID,\n          },\n        },\n      })\n\n      if (transaction && transaction.status == 'PENDING') {\n        if (body.Body.stkCallback.ResultCode == 0) {\n          // transaction was a success\n          const amount = Number(body.Body.stkCallback.CallbackMetadata.Item.find((a) => a?.Name == 'Amount')?.Value ?? '0')\n          const transId = body.Body.stkCallback.CallbackMetadata.Item.find((a) => a?.Name == 'MpesaReceiptNumber')?.Value?.toString()\n          const phone = body.Body.stkCallback.CallbackMetadata.Item.find((a) => a?.Name == 'PhoneNumber')?.Value?.toString()\n          await this.app.prisma.transaction.update({\n            where: {\n              id: transaction.id,\n            },\n            data: {\n              status: 'SUCCESS',\n              amount,\n              transactionId: transId,\n              type: 'DEPOSIT',\n              phone,\n              date: dayjs().toDate(),\n              user: {\n                update: {\n                  accountBalance: {\n                    increment: amount,\n                  },\n                },\n              },\n            },\n          })\n        } else {\n          // mark transaction as a failure\n          await this.app.prisma.transaction.update({\n            where: {\n              id: transaction.id,\n            },\n            data: {\n              status: 'FAILED',\n            },\n          })\n        }\n      } else {\n        return { success: true, message: 'Success! Callback received' }\n      }\n    } catch (error) {\n      this.app.Sentry.captureException(error)\n      return this.res.status(500).send({\n        success: false,\n        message: 'Failed! Something went wrong',\n      })\n    }\n  }\n}\n"]}