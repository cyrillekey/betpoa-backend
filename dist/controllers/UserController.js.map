{"version":3,"file":"UserController.js","sourceRoot":"/","sources":["controllers/UserController.ts"],"names":[],"mappings":"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","sourcesContent":["import { configs } from '@configs/index'\nimport { Prisma } from '@prisma/client'\nimport MpesaLibrary from '@utils/mpesa'\nimport { compare, genSaltSync, hash } from 'bcrypt'\nimport dayjs from 'dayjs'\nimport { v4 } from 'uuid'\n\nimport { IDefaultResponse } from './interface/fixtures'\nimport { IPasswordResetBody, IPasswordUpdateBody, ISignInBody, ISignUpBody, IUpdateUserBody, IValidateOptBody } from './interface/user'\nimport { BaseController } from './BaseController'\nexport class UserController extends BaseController {\n  private generateOtp = (length = 4) => {\n    let otp = ''\n\n    for (let i = 0; i < length; i++) {\n      otp += Math.floor(Math.random() * 10)\n    }\n\n    return otp\n  }\n  async signupCustomer() {\n    try {\n      const body: ISignUpBody = this.req.body as ISignUpBody\n      const phone = this.app.helpers.formatPhoneNumber(body.phone)\n      if (!this.app.helpers.validatePhoneNumber(phone)) {\n        return this.res.status(400).send({\n          success: false,\n          id: null,\n          message: 'Invalid Phone number provided',\n        })\n      }\n      const exists = await this.app.prisma.user\n        .findFirstOrThrow({\n          where: {\n            phone: phone,\n          },\n          select: {\n            id: true,\n          },\n        })\n        .then((response) => response?.id)\n        .catch(() => null)\n      if (exists)\n        return this.res.status(400).send(<IDefaultResponse>{\n          success: false,\n          id: null,\n          message: 'Failed! Phone number already used',\n        })\n      const salt = genSaltSync(10)\n      const password = await hash(body.password, salt)\n      const user = await this.app.prisma.user.create({\n        data: {\n          password,\n          phone,\n          phoneValidated: false,\n          profile: {\n            create: {\n              fname: 'Customer',\n              lname: 'Customer',\n            },\n          },\n        },\n      })\n      const jwtUser = {\n        id: user?.id,\n        phone: user?.phone,\n        phoneValidated: user?.phoneValidated,\n        profileId: user?.profileId,\n        role: user?.role,\n      }\n      const token = this.app.helpers.jwt.sign(jwtUser)\n\n      return this.res.status(201).send(<IDefaultResponse>{\n        id: user?.id,\n        success: true,\n        message: 'Success! User Created',\n        token: token,\n        user: jwtUser,\n      })\n    } catch (error) {\n      this.app.Sentry.captureException(error)\n      return this.res.status(500).send(<IDefaultResponse>{\n        id: null,\n        success: false,\n        message: 'Failed! Something went wrong please try again',\n      })\n    }\n  }\n  async loginUser() {\n    try {\n      const body = this.req.body as ISignInBody\n      const user = await this.app.prisma.user.findUnique({\n        where: {\n          phone: this.app.helpers.formatPhoneNumber(body.phone),\n        },\n      })\n      if (!user) {\n        return this.res.status(400).send(<IDefaultResponse>{\n          id: null,\n          success: false,\n          message: 'Failed! Invalid credentials provided',\n        })\n      }\n      const password = await compare(body.password, user.password)\n      if (!password) {\n        return this.res.status(403).send(<IDefaultResponse>{\n          id: null,\n          success: false,\n          message: 'Failed! Invalid credentials provided',\n        })\n      }\n      const jwtUser = {\n        id: user?.id,\n        phone: user?.phone,\n        phoneValidated: user?.phoneValidated,\n        profileId: user?.profileId,\n        role: user?.role,\n      }\n      const token = this.app.helpers.jwt.sign(jwtUser)\n      return this.res.status(200).send({\n        id: user?.id,\n        sucess: true,\n        token: token,\n        user: jwtUser,\n      })\n    } catch (error) {\n      this.app.Sentry.captureException(error)\n      return this.res.status(500).send(<IDefaultResponse>{\n        id: null,\n        success: false,\n        message: 'Failed! Something went wrong please try again',\n      })\n    }\n  }\n  async requestPhoneOtp() {\n    try {\n      const user = await this.app.prisma.user.findUnique({\n        where: {\n          id: this.req.user.id,\n        },\n      })\n      if (!user) {\n        return this.res.status(404).send(<IDefaultResponse>{\n          id: null,\n          success: false,\n          message: 'Error! User Not Found Please try again',\n        })\n      }\n      if (user?.phoneValidated) {\n        return this.res.status(400).send(<IDefaultResponse>{\n          id: null,\n          success: false,\n          message: 'Error! User Phone already verified',\n        })\n      }\n      const token = this.generateOtp(6)\n      await this.app.prisma.otpToken.create({\n        data: {\n          userId: user?.id,\n          expiryDate: dayjs().add(10, 'minutes').toDate(),\n          token,\n        },\n      })\n      await this.app.messaging.sendSms(user.phone, `Your ${configs.appname} OTP is ${token}. This token is valid for the next 10 minutes`)\n      return this.res.status(200).send(<IDefaultResponse>{\n        id: null,\n        success: true,\n        message: `Success! OTP sent to ${user.phone}`,\n      })\n    } catch (error) {\n      this.app.Sentry.captureException(error)\n      return this.res.status(500).send(<IDefaultResponse>{\n        id: null,\n        success: false,\n        message: 'Error! Something went wrong please try again',\n      })\n    }\n  }\n  async validateOtp() {\n    try {\n      const body: IValidateOptBody = this.req.body as IValidateOptBody\n      const phoneOtp = await this.app.prisma.otpToken\n        .findFirstOrThrow({\n          where: {\n            userId: this.req.user.id,\n            token: body.otp,\n            expiryDate: {\n              gte: dayjs().toDate(),\n            },\n          },\n        })\n        .then((resp) => resp?.id)\n        .catch(() => null)\n      if (!phoneOtp)\n        return this.res.status(400).send(<IDefaultResponse>{\n          id: null,\n          success: false,\n          message: 'Failed! Invalid token provided',\n        })\n      await this.app.prisma.user.update({\n        where: {\n          id: this.req.user.id,\n        },\n        data: {\n          phoneValidated: true,\n        },\n      })\n      await this.app.prisma.otpToken.delete({\n        where: {\n          id: phoneOtp,\n        },\n      })\n      return this.res.status(200).send(<IDefaultResponse>{\n        id: this.req.user.id,\n        success: true,\n        message: 'Success! User Verified',\n      })\n    } catch (error) {\n      this.app.Sentry.captureException(error)\n      return this.res.status(500).send(<IDefaultResponse>{\n        id: null,\n        success: false,\n        message: 'Error! Something went wrong please try again',\n      })\n    }\n  }\n  async updateUser() {\n    try {\n      const body: IUpdateUserBody = this.req.body as IUpdateUserBody\n\n      const update: Prisma.UserProfileUpdateInput = {\n        fname: body?.fname,\n        lname: body?.lname,\n        email: body?.email,\n      }\n      if (body?.avatar) {\n        update.avatar = {\n          create: {\n            filename: body.avatar.filename,\n            link: body.avatar.link,\n            fileType: body.avatar.fileType,\n          },\n        }\n      }\n      const user = await this.app.prisma.userProfile.update({\n        where: {\n          id: this.req.user.profileId,\n        },\n        data: update,\n      })\n      if (!user?.id)\n        return this.res.status(500).send(<IDefaultResponse>{\n          id: null,\n          success: false,\n          message: 'Failed! Could not update profile please try again',\n        })\n      return this.res.send({\n        id: user?.id,\n        success: true,\n        message: 'Success! User Updated successfully',\n      })\n    } catch (error) {\n      this.app.Sentry.captureException(error)\n      return this.res.status(500).send(<IDefaultResponse>{\n        id: null,\n        success: false,\n        message: 'Error! Something went wrong please try again',\n      })\n    }\n  }\n  async requestPasswordReset() {\n    try {\n      const body: IPasswordResetBody = this.req.body as IPasswordResetBody\n      const isValid = this.app.helpers.validatePhoneNumber(body.phone)\n      if (!isValid)\n        return this.res.status(500).send(<IDefaultResponse>{\n          id: null,\n          success: false,\n          message: 'Error! Invalid phone number provided',\n        })\n      const exists = await this.app.prisma.user.findUnique({\n        where: {\n          phone: this.app.helpers.formatPhoneNumber(body.phone),\n        },\n      })\n      if (!exists) {\n        return this.res.status(500).send(<IDefaultResponse>{\n          id: null,\n          success: false,\n          message: 'Error! Account does not exist',\n        })\n      }\n      const token = this.generateOtp(6)\n      await this.app.prisma.otpToken.create({\n        data: {\n          userId: exists.id,\n          expiryDate: dayjs().add(10, 'minutes').toDate(),\n          token,\n        },\n      })\n      await this.app.messaging.sendSms(exists.phone, `Your ${configs.appname} OTP is ${token}. This token is valid for the next 10 minutes`)\n      return this.res.status(200).send(<IDefaultResponse>{\n        id: null,\n        success: true,\n        message: `Success! Password reset OTP sent to mobile`,\n      })\n    } catch (error) {\n      this.app.Sentry.captureException(error)\n      return this.res.status(500).send(<IDefaultResponse>{\n        id: null,\n        success: false,\n        message: 'Error! Something went wrong please try again',\n      })\n    }\n  }\n  async updateUserPassword() {\n    try {\n      const body = this.req.body as IPasswordUpdateBody\n      const user = await this.app.prisma.user.findUnique({\n        where: {\n          phone: this.app.helpers.formatPhoneNumber(body.phone),\n        },\n      })\n      if (!user) {\n        return this.res.status(404).send(<IDefaultResponse>{\n          id: null,\n          success: false,\n          message: 'Error! User Not Found',\n        })\n      }\n      const phoneOtp = await this.app.prisma.otpToken\n        .findFirstOrThrow({\n          where: {\n            userId: user?.id,\n            token: body.otp,\n            expiryDate: {\n              gte: dayjs().toDate(),\n            },\n          },\n        })\n        .then((resp) => resp?.id)\n        .catch(() => null)\n\n      if (!phoneOtp)\n        return this.res.status(400).send(<IDefaultResponse>{\n          id: null,\n          success: false,\n          message: 'Failed! Invalid token provided',\n        })\n      const salt = genSaltSync(10)\n      const password = await hash(body.password, salt)\n      await this.app.prisma.user.update({\n        where: {\n          id: user.id,\n        },\n        data: {\n          password,\n        },\n      })\n      const jwtUser = {\n        id: user?.id,\n        phone: user?.phone,\n        phoneValidated: user?.phoneValidated,\n        profileId: user?.profileId,\n        role: user?.role,\n      }\n      await this.app.prisma.otpToken.delete({\n        where: {\n          id: phoneOtp,\n        },\n      })\n      const token = this.app.helpers.jwt.sign(jwtUser)\n      return this.res.status(200).send({\n        id: user?.id,\n        success: true,\n        message: 'Success! Password updated',\n        token: token,\n        user: jwtUser,\n      })\n    } catch (error) {\n      this.app.Sentry.captureException(error)\n      this.app.log.error(error)\n      return this.res.status(500).send(<IDefaultResponse>{\n        id: null,\n        success: false,\n        message: 'Error! Something went wrong please try again',\n      })\n    }\n  }\n  async userMpesaDeposit() {\n    try {\n      const isPhoneValid = this.app.helpers.validatePhoneNumber(this.body.phone)\n      if (!isPhoneValid) {\n        return this.res.status(400).send(<IDefaultResponse>{\n          id: null,\n          success: false,\n          message: 'Error! Invalid phone number provided',\n        })\n      }\n      if (Number(this.body.amount) < 10) {\n        return this.res.status(400).send(<IDefaultResponse>{\n          id: null,\n          success: false,\n          message: 'Error! Amount should be greater or equal to 10',\n        })\n      }\n      const amount = Number(this.body.amount)\n      const phone = this.app.helpers.formatPhoneNumber(this.body.phone)\n      const mpesa = await MpesaLibrary.initiateMpesaStkPush({ phone, amount, uniqueId: `${configs.appname}` })\n      if (mpesa.success) {\n        await this.app.prisma.transaction.create({\n          data: {\n            userId: this.req.user.id,\n            amount: 0.0,\n            date: new Date(),\n            transactionId: '',\n            type: 'DEPOSIT',\n            status: 'PENDING',\n            checkoutRequestId: mpesa.CheckoutRequestID,\n            merchantRequestId: mpesa.MerchantRequestID,\n          },\n        })\n        return this.res.send(<IDefaultResponse>{\n          success: true,\n          id: null,\n          message: mpesa?.message,\n        })\n      } else {\n        return this.res.status(400).send(<IDefaultResponse>{\n          success: false,\n          id: null,\n          message: mpesa?.message,\n        })\n      }\n    } catch (error) {\n      this.app.Sentry.captureException(error)\n      this.app.log.error(error)\n      return this.res.status(500).send(<IDefaultResponse>{\n        id: null,\n        success: false,\n        message: 'Error! Something went wrong please try again',\n      })\n    }\n  }\n  async mpesaWithdraw() {\n    try {\n      const amount = Number(this.body.amount?.phone.toString())\n      const user = await this.app.prisma.user.findUnique({\n        where: {\n          id: this.req.user.id,\n        },\n        select: {\n          id: true,\n          accountBalance: true,\n          phone: true,\n        },\n      })\n      const hasBalance = user!.accountBalance - amount\n      if (hasBalance < 0) {\n        return this.res.status(400).send(<IDefaultResponse>{\n          id: null,\n          success: false,\n          message: 'Failed! Amount exceeds account balance',\n        })\n      }\n      const mpesa = await MpesaLibrary.payoutToMobileNumber({ phone: user!.phone, amount, reference: v4(), remarks: 'Bepoa Payout' })\n      if (!mpesa?.ConversationID)\n        return this.res.status(400).send(<IDefaultResponse>{\n          id: null,\n          success: false,\n          message: mpesa?.ResponseDescription,\n        })\n      await this.app.prisma.transaction.create({\n        data: {\n          amount,\n          phone: user?.phone,\n          date: dayjs().toDate(),\n          checkoutRequestId: mpesa.ConversationID,\n          merchantRequestId: mpesa.OriginatorConversationID,\n          status: 'PENDING',\n          type: 'WITHDRAWAL',\n          transactionId: '',\n          userId: user!.id,\n        },\n      })\n      return <IDefaultResponse>{\n        id: null,\n        success: true,\n        message: 'Success! Mpesa withdrawal initiated',\n      }\n    } catch (error) {\n      this.app.Sentry.captureException(error)\n      this.app.log.error(error)\n      return this.res.status(500).send(<IDefaultResponse>{\n        id: null,\n        success: false,\n        message: 'Error! Something went wrong please try again',\n      })\n    }\n  }\n}\n"]}