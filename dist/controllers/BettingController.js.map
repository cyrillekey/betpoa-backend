{"version":3,"file":"BettingController.js","sourceRoot":"/","sources":["controllers/BettingController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Prisma } from '@prisma/client'\nimport dayjs from 'dayjs'\n\nimport { IDefaultQueryResponse, IDefaultResponse, IPlaceBetBody } from './interface/fixtures'\nimport { BaseController } from './BaseController'\n\nexport default class BettingController extends BaseController {\n  async placeBet() {\n    try {\n      // TODO ADD RESTRICTION TO PREVENT BETTING ON ONGOING MATCHES\n      const body: IPlaceBetBody = this.body\n      const accountBalance = await this.app.prisma.user.findUnique({\n        where: {\n          id: this.req.user.id,\n        },\n        select: {\n          accountBalance: true,\n          id: true,\n        },\n      })\n      if (body.amount > accountBalance!.accountBalance) {\n        return this.res.status(400).send(<IDefaultQueryResponse>{\n          success: false,\n          id: null,\n          message: 'Failed! Bet amount exceeds account balance',\n        })\n      }\n\n      const odds = await this.app.prisma.odds.findMany({\n        where: {\n          id: {\n            in: body.data.map((a) => a?.oddsId),\n          },\n          fixture: {\n            date: {\n              gt: dayjs().toDate(),\n            },\n          },\n        },\n      })\n      if (!odds?.length) {\n        return this.res.status(400).send(<IDefaultResponse>{\n          id: null,\n          success: false,\n          message: 'Failed! No markets to bet on',\n        })\n      }\n      let totalOdds = 1.0\n      const transaction = odds.reduce((transactions: Prisma.BetMarketOddsCreateManyBetInput[], current) => {\n        const pick = body.data.find((a) => a?.oddsId == current?.id)\n        if (!pick) {\n          return transactions\n        }\n        totalOdds = totalOdds * current.odd\n        transactions.push({\n          oddId: current.id,\n          pick: pick?.pick,\n          betOdd: current.odd,\n          status: 'PENDING',\n        })\n        return transactions\n      }, [])\n      const bet = await this.app.prisma.$transaction([\n        this.app.prisma.bet.create({\n          data: {\n            amountPlaced: body.amount,\n            date: dayjs().toDate(),\n            totalOdds: totalOdds,\n            possibleWin: totalOdds * body.amount,\n            status: 'PENDING',\n            userId: accountBalance!.id,\n            totalMarkets: transaction.length,\n            markets: {\n              createMany: {\n                data: transaction,\n              },\n            },\n          },\n        }),\n        this.app.prisma.user.update({\n          data: {\n            accountBalance: {\n              decrement: body.amount,\n            },\n          },\n          where: {\n            id: accountBalance?.id,\n          },\n        }),\n      ])\n      if (!bet) {\n        return this.res.status(400).send(<IDefaultResponse>{\n          id: null,\n          success: false,\n          message: 'Failed! Something went wrong please try again',\n        })\n      }\n      return this.res.send(<IDefaultResponse>{\n        id: bet[0].id,\n        message: 'Success! Bet placed',\n        success: true,\n      })\n    } catch (error) {\n      this.app.Sentry.captureException(error)\n      return this.res.status(500).send(<IDefaultQueryResponse>{\n        id: null,\n        success: false,\n        message: 'Error! Something went wrong please try again',\n        data: null,\n      })\n    }\n  }\n  async cancelBet() {\n    try {\n      const betId = Number((this.req.params as any).id)\n      const bet = await this.app.prisma.bet.findUnique({\n        where: {\n          id: betId,\n          userId: this.user.id,\n        },\n        include: {\n          markets: {\n            where: {\n              odd: {\n                fixture: {\n                  date: {\n                    lte: dayjs().toDate(),\n                  },\n                },\n              },\n            },\n          },\n        },\n      })\n      if (!bet) {\n        return this.res.status(400).send(<IDefaultResponse>{\n          id: null,\n          success: false,\n          message: 'Failed! Bet not found please try again',\n        })\n      }\n      if (bet?.markets?.length > 0) {\n        return this.res.status(400).send(<IDefaultResponse>{\n          id: bet?.id,\n          success: false,\n          message: 'Failed! Bet has matches which have already begun',\n        })\n      }\n      await this.app.prisma.bet.update({\n        where: {\n          id: bet.id,\n        },\n        data: {\n          status: 'CANCELLED',\n          user: {\n            update: {\n              accountBalance: bet.amountPlaced,\n            },\n          },\n        },\n      })\n      return this.res.status(200).send(<IDefaultResponse>{\n        id: bet?.id,\n        success: true,\n        message: 'Success! Bet placed successfuly',\n      })\n    } catch (error) {\n      this.app.Sentry.captureException(error)\n      return this.res.status(500).send(<IDefaultQueryResponse>{\n        id: null,\n        success: false,\n        message: 'Error! Something went wrong please try again',\n        data: null,\n      })\n    }\n  }\n  async getGets() {\n    try {\n      const bets = await this.app.prisma.bet.findMany({\n        where: {\n          userId: this.user.id,\n        },\n        orderBy: {\n          createdAt: 'desc',\n        },\n      })\n      return <IDefaultQueryResponse>{\n        id: null,\n        success: true,\n        data: bets,\n        message: 'Success! Bets found',\n      }\n    } catch (error) {\n      this.app.Sentry.captureException(error)\n      return this.res.status(500).send(<IDefaultQueryResponse>{\n        id: null,\n        data: [],\n        success: false,\n        message: 'Error! Something went wrong please try again',\n      })\n    }\n  }\n  async getBet() {}\n  async getBetItems() {}\n}\n"]}