{"version":3,"file":"odds.js","sourceRoot":"/","sources":["cronjobs/odds.ts"],"names":[],"mappings":"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","sourcesContent":["import { OddType, Prisma } from '@prisma/client'\nimport { getDateOdds } from '@rapidapi/index'\nimport { Odds } from '@rapidapi/odd'\nimport dayjs from 'dayjs'\nimport { FastifyInstance } from 'fastify'\n\nexport const getFixturesOdds = async (app: FastifyInstance) => {\n  const checkInId = app.Sentry.captureCheckIn(\n    {\n      monitorSlug: 'fixtures_odds_cron',\n      status: 'in_progress',\n    },\n    {\n      schedule: {\n        // Specify your schedule options here\n        type: 'crontab',\n        value: '50 03 * * *',\n      },\n      checkinMargin: 1,\n      maxRuntime: 10,\n      timezone: 'Africa/Nairobi',\n    },\n  )\n  try {\n    // get next three days odds\n    const bookmakers = [8, 11]\n    app.log.info('Generating odds cronjob starting')\n    for (let x = 0; x < bookmakers.length; x++) {\n      for (let index = 0; index < 3; index++) {\n        app.log.info(`Generating odds for ${dayjs().add(index, 'day').toDate()}`)\n        const oddsResponse = await getDateOdds(dayjs().add(index, 'day').toDate(), 1, bookmakers[x])\n        app.log.info(`${dayjs().add(index, 'day').toDate()} has ${oddsResponse?.total}`)\n\n        await saveOddsToDatabase(app, oddsResponse?.odds)\n\n        // loop through nex pages and get the data\n        for (let index = 2; index < oddsResponse.total + 1; index++) {\n          app.log.info(`Fetching for page ${index}`)\n          const nextOdds = await getDateOdds(dayjs().add(index, 'day').toDate(), index, bookmakers[x])\n          app.log.info(`${index} has ${nextOdds?.odds?.length} odds`)\n          await saveOddsToDatabase(app, nextOdds?.odds)\n        }\n      }\n    }\n\n    app.log.info('Generating odds cronjob finished')\n    app.Sentry.captureCheckIn({ checkInId, status: 'ok', monitorSlug: 'fixtures_odds_cron' })\n  } catch (error) {\n    app.log.error(error)\n    app.log.info('Generating odds cronjob crashed')\n    app.Sentry.captureCheckIn({ checkInId, status: 'error', monitorSlug: 'fixtures_odds_cron' })\n  }\n}\n\nconst saveOddsToDatabase = async (app: FastifyInstance, odds: Odds[]) => {\n  try {\n    if (odds.length > 0) {\n      const fixtures = (\n        await app.prisma.fixture.findMany({\n          select: {\n            fixtureId: true,\n            id: true,\n            _count: {\n              select: {\n                odds: true,\n              },\n            },\n          },\n          where: {\n            fixtureId: {\n              in: odds.map((a) => a?.fixture?.id),\n            },\n          },\n        })\n      ).filter((a) => a?._count?.odds == 0)\n      const transaction: Prisma.OddsCreateManyInput[] = []\n      fixtures.forEach((fixture) => {\n        const markets = odds.find((a) => a?.fixture?.id == fixture?.fixtureId)?.bookmakers?.at(0)?.bets\n        markets?.forEach((market) => {\n          switch (market.name) {\n            case 'Match Winner':\n              transaction.push(\n                ...market.values.map((a) => ({\n                  fixtureId: fixture?.id,\n                  name: a?.value.toString(),\n                  odd: Number(a?.odd),\n                  type: 'WINNER_FT' as OddType,\n                })),\n              )\n              break\n            case 'Home/Away':\n              transaction.push(\n                ...market.values.map((a) => ({\n                  fixtureId: fixture?.id,\n                  name: a?.value.toString(),\n                  odd: Number(a?.odd),\n                  type: 'HOME_OR_AWAY' as OddType,\n                })),\n              )\n              break\n            case 'Second Half Winner':\n              transaction.push(\n                ...market.values.map((a) => ({\n                  fixtureId: fixture?.id,\n                  name: a?.value.toString(),\n                  odd: Number(a?.odd),\n                  type: 'WINNER_2HT' as OddType,\n                })),\n              )\n              break\n            case 'Goals Over/Under':\n              transaction.push(\n                ...market.values.map((a) => ({\n                  fixtureId: fixture?.id,\n                  name: a?.value.toString(),\n                  odd: Number(a?.odd),\n                  value: a?.value.toString().slice(-3),\n                  type: 'OVER_UNDER_FT' as OddType,\n                })),\n              )\n              break\n            case 'Goals Over/Under First Half':\n              transaction.push(\n                ...market.values.map((a) => ({\n                  fixtureId: fixture?.id,\n                  name: a?.value.toString(),\n                  odd: Number(a?.odd),\n                  value: a?.value.toString().slice(-3),\n                  type: 'OVER_UNDER_HT' as OddType,\n                })),\n              )\n              break\n            case 'Goals Over/Under - Second Half':\n              transaction.push(\n                ...market.values.map((a) => ({\n                  fixtureId: fixture?.id,\n                  name: a?.value.toString(),\n                  odd: Number(a?.odd),\n                  type: 'OVER_UNDER_HT' as OddType,\n                })),\n              )\n              break\n            case 'HT/FT Double':\n              transaction.push(\n                ...market.values.map((a) => ({\n                  fixtureId: fixture?.id,\n                  name: a?.value.toString(),\n                  odd: Number(a?.odd),\n                  value: a?.value.toString(),\n                  type: 'HALFTIME_FULLTIME' as OddType,\n                })),\n              )\n              break\n            case 'Both Teams Score':\n              transaction.push(\n                ...market.values.map((a) => ({\n                  fixtureId: fixture?.id,\n                  name: a?.value.toString(),\n                  odd: Number(a?.odd),\n                  type: 'BOTH_TEAM_SCORE' as OddType,\n                })),\n              )\n              break\n            case 'Exact Score':\n              transaction.push(\n                ...market.values.map((a) => ({\n                  fixtureId: fixture?.id,\n                  name: a?.value.toString(),\n                  odd: Number(a?.odd),\n                  type: 'EXACT_SCORE_FT' as OddType,\n                })),\n              )\n              break\n            case 'Correct Score - First Half':\n              transaction.push(\n                ...market.values.map((a) => ({\n                  fixtureId: fixture?.id,\n                  name: a?.value.toString(),\n                  odd: Number(a?.odd),\n                  type: 'EXACT_SCORE_HT' as OddType,\n                })),\n              )\n              break\n            case 'Double Chance':\n              transaction.push(\n                ...market.values.map((a) => ({\n                  fixtureId: fixture?.id,\n                  name: a?.value.toString(),\n                  odd: Number(a?.odd),\n                  type: 'DOUBLE_CHANCE' as OddType,\n                })),\n              )\n              break\n            case 'First Half Winner':\n              transaction.push(\n                ...market.values.map((a) => ({\n                  fixtureId: fixture?.id,\n                  name: a?.value.toString(),\n                  odd: Number(a?.odd),\n                  type: 'WINNER_HT' as OddType,\n                })),\n              )\n              break\n            case 'Total - Home':\n              transaction.push(\n                ...market.values.map((a) => ({\n                  fixtureId: fixture?.id,\n                  name: a?.value.toString(),\n                  odd: Number(a?.odd),\n                  type: 'OVER_HOME' as OddType,\n                  value: a?.value.toString().slice(-3),\n                })),\n              )\n              break\n            case 'Total - Away':\n              transaction.push(\n                ...market.values.map((a) => ({\n                  fixtureId: fixture?.id,\n                  name: a?.value.toString(),\n                  odd: Number(a?.odd),\n                  type: 'OVER_AWAY' as OddType,\n                  value: a?.value.toString().slice(-3),\n                })),\n              )\n              break\n            case 'Double Chance - First Half':\n              transaction.push(\n                ...market.values.map((a) => ({\n                  fixtureId: fixture?.id,\n                  name: a?.value.toString(),\n                  odd: Number(a?.odd),\n                  type: 'OVER_AWAY' as OddType,\n                })),\n              )\n              break\n            case 'Odd/Even':\n              transaction.push(\n                ...market.values.map((a) => ({\n                  fixtureId: fixture?.id,\n                  name: a?.value.toString(),\n                  odd: Number(a?.odd),\n                  type: 'FT_ODD_EVEN' as OddType,\n                })),\n              )\n              break\n            case 'Odd/Even - First Half':\n              transaction.push(\n                ...market.values.map((a) => ({\n                  fixtureId: fixture?.id,\n                  name: a?.value.toString(),\n                  odd: Number(a?.odd),\n                  type: 'HALF_ODD_EVEN' as OddType,\n                })),\n              )\n              break\n            case 'Home Odd/Even':\n              transaction.push(\n                ...market.values.map((a) => ({\n                  fixtureId: fixture?.id,\n                  name: a?.value.toString(),\n                  odd: Number(a?.odd),\n                  type: 'HOME_ODD_EVEN' as OddType,\n                })),\n              )\n              break\n            case 'Away Odd/Even':\n              transaction.push(\n                ...market.values.map((a) => ({\n                  fixtureId: fixture?.id,\n                  name: a?.value.toString(),\n                  odd: Number(a?.odd),\n                  type: 'AWAY_ODD_EVEN' as OddType,\n                })),\n              )\n              break\n            case 'Exact Goals Number':\n              transaction.push(\n                ...market.values.map((a) => ({\n                  fixtureId: fixture?.id,\n                  name: a?.value.toString(),\n                  odd: Number(a?.odd),\n                  type: 'TOTAL_GOALS' as OddType,\n                  value: a?.value?.toString(),\n                })),\n              )\n              break\n            case 'Home Team Exact Goals Number':\n              transaction.push(\n                ...market.values.map((a) => ({\n                  fixtureId: fixture?.id,\n                  name: a?.value.toString(),\n                  odd: Number(a?.odd),\n                  type: 'TOTAL_GOALS_HOME' as OddType,\n                  value: a?.value?.toString(),\n                })),\n              )\n              break\n            case 'Away Team Exact Goals Number':\n              transaction.push(\n                ...market.values.map((a) => ({\n                  fixtureId: fixture?.id,\n                  name: a?.value.toString(),\n                  odd: Number(a?.odd),\n                  type: 'TOTAL_GOALS_AWAY' as OddType,\n                  value: a?.value?.toString(),\n                })),\n              )\n              break\n            default:\n              break\n          }\n        })\n      })\n      await app.prisma.odds.createMany({\n        skipDuplicates: true,\n        data: transaction,\n      })\n    }\n  } catch (error) {\n    app.Sentry.captureException(error)\n    app.log.error(error)\n  }\n}\n"]}