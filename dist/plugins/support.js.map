{"version":3,"file":"support.js","sourceRoot":"/","sources":["plugins/support.ts"],"names":[],"mappings":";;;;;;AAAA,0CAAwC;AAExC,oEAA+B;AAC/B,gEAA8B;AAiBjB,QAAA,KAAK,GAAG;IAInB,IAAI,EAAE,CAAC,OAAgB,EAAE,EAAE;QACzB,IAAI,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC;YACnC,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAA;QACnE,CAAC;QAED,OAAO,sBAAG,CAAC,IAAI,CAAC,OAAO,EAAE,eAAO,CAAC,SAAS,CAAC,CAAA;IAC7C,CAAC;IAID,MAAM,EAAE,CAAC,UAAkB,EAAkB,EAAE;QAC7C,IAAI,CAAC;YACH,OAAO,sBAAG,CAAC,MAAM,CAAC,UAAU,EAAE,eAAO,CAAC,SAAS,CAAY,CAAA;QAC7D,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,IAAI,CAAA;QACb,CAAC;IACH,CAAC;CACF,CAAA;AAED,MAAM,iBAAiB,GAAG,CAAC,KAAa,EAAU,EAAE;IAClD,IAAI,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;QAC1B,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;IACnC,CAAC;SAAM,IAAI,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;QACjC,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;IAC5B,CAAC;SAAM,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC;QAChE,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;IACnC,CAAC;SAAM,IAAI,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;QACjC,KAAK,GAAG,KAAK,GAAG,KAAK,CAAA;IACvB,CAAC;IAED,OAAO,KAAK,CAAA;AACd,CAAC,CAAA;AAED,MAAM,cAAc,GAAG,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAkB,EAAE,EAAE;IAC9D,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC,CAAA;AACxF,CAAC,CAAA;AAED,MAAM,oBAAoB,GAAG,CAAC,KAAK,GAAG,EAAE,EAAW,EAAE;IACnD,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,CAAA;IAC9C,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,OAAO,KAAK,CAAA;IACd,CAAC;IACD,OAAO,6DAA6D,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AAClF,CAAC,CAAA;AACD,MAAM,mBAAmB,GAAG,CAAC,KAAa,EAAW,EAAE;IACrD,OAAO,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAA;AAClD,CAAC,CAAA;AAGD,kBAAe,IAAA,wBAAE,EAAuB,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;IAC/D,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAE,iBAAiB,EAAE,cAAc,EAAE,oBAAoB,EAAE,mBAAmB,EAAE,GAAG,EAAE,aAAK,EAAE,CAAC,CAAA;AAC3H,CAAC,CAAC,CAAA","sourcesContent":["import { configs } from '@configs/index'\nimport { User } from '@prisma/client'\nimport fp from 'fastify-plugin'\nimport jwt from 'jsonwebtoken'\ninterface IFormatCurreny {\n  currency: 'CAD' | 'KSH' | 'USD'\n  amount: number\n}\nexport type UserJwt = Omit<User, 'password' | 'createdAt' | 'updatedAt' | 'accountBalance'>\ninterface IJWTToken {\n  sign: (options: UserJwt) => string\n  verify: (token: string) => UserJwt | null\n}\nexport interface SupportPluginOptions {\n  formatPhoneNumber(phone: string): string\n  formatCurrency(params: IFormatCurreny): string\n  validateEmailAddress(email: string): boolean\n  validatePhoneNumber(phone: string): boolean\n  jwt: IJWTToken\n}\nexport const token = {\n  /**\n   * Use JWT to sign a token\n   */\n  sign: (options: UserJwt) => {\n    if (!options?.id || !options?.role) {\n      throw new Error('Expects email, account type and id in payload.')\n    }\n\n    return jwt.sign(options, configs.jwtsecret)\n  },\n  /**\n   * Verify token, and get passed in variables\n   */\n  verify: (tokenValue: string): UserJwt | null => {\n    try {\n      return jwt.verify(tokenValue, configs.jwtsecret) as UserJwt\n    } catch (error) {\n      return null\n    }\n  },\n}\n\nconst formatPhoneNumber = (phone: string): string => {\n  if (phone.startsWith('0')) {\n    phone = phone.replace('0', '254')\n  } else if (phone.startsWith('+')) {\n    phone = phone.substring(1)\n  } else if (phone.startsWith('0110') || phone.startsWith('0111')) {\n    phone = phone.replace('0', '254')\n  } else if (phone.startsWith('7')) {\n    phone = '254' + phone\n  }\n\n  return phone\n}\n\nconst formatCurrency = ({ currency, amount }: IFormatCurreny) => {\n  return Intl.NumberFormat('en-US', { style: 'currency', currency }).format(amount || 0)\n}\n\nconst validateEmailAddress = (email = ''): boolean => {\n  email = email.replace(/\\s/g, '').toLowerCase()\n  if (!email) {\n    return false\n  }\n  return /^([a-zA-Z0-9_.-])+@(([a-zA-Z0-9-])+\\.)+([a-zA-Z0-9]{2,4})+$/.test(email)\n}\nconst validatePhoneNumber = (phone: string): boolean => {\n  return /^\\d{12}$/.test(formatPhoneNumber(phone))\n}\n// The use of fastify-plugin is required to be able\n// to export the decorators to the outer scope\nexport default fp<SupportPluginOptions>(async (fastify, _opts) => {\n  fastify.decorate('helpers', { formatPhoneNumber, formatCurrency, validateEmailAddress, validatePhoneNumber, jwt: token })\n})\n\n// When using .decorate you have to specify added properties for Typescript\ndeclare module 'fastify' {\n  export interface FastifyInstance {\n    helpers: SupportPluginOptions\n  }\n}\n"]}