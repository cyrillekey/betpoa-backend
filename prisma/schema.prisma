// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Markets {
  id Int @default(autoincrement()) @id
  name  String
  type  String
  logo  String?
  leagues League [] @relation()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("markets")
}
model User {
  id             Int           @id @default(autoincrement())
  phone          String        @unique
  password       String
  role           UserRole      @default(CUSTOMER)
  phoneValidated Boolean       @default(false)
  accountBalance Float         @default(0.0)
  profile        UserProfile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId      Int           @unique
  bets           Bet[]         @relation()
  resetTokens    OtpToken[]    @relation()
  transactions   Transaction[] @relation()
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("user")
}

model UserProfile {
  id        Int         @id @default(autoincrement())
  fname     String?
  lname     String?
  email     String?
  user      User?       @relation()
  avatar    Attachment? @relation(fields: [avatarId], references: [id], onDelete: Cascade)
  avatarId  Int?        @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("userprofile")
}

model OtpToken {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  token      String
  expiryDate DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("opttoken")
}

model Attachment {
  id          Int          @id @default(autoincrement())
  link        String
  filename    String
  fileType    String
  userProfile UserProfile?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("attachment")
}

model Bet {
  id           Int             @id @default(autoincrement())
  date         DateTime
  markets      BetMarketOdds[] @relation()
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  amountPlaced Float           @default(1.0)
  totalMarkets Int             @default(1)
  totalOdds    Float           @default(1.0)
  possibleWin  Float           @default(0.0)
  status       BETSTATUS       @default(PENDING)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@map("bet")
}

model BetMarketOdds {
  id        Int       @id @default(autoincrement())
  pick      String
  odd       Odds      @relation(fields: [oddId], references: [id], onDelete: Cascade)
  oddId     Int
  bet       Bet       @relation(fields: [betId], references: [id], onDelete: Cascade)
  betId     Int
  betOdd    Float     @default(1.0)
  status    BETSTATUS @default(PENDING)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("betmarketodds")
}

model League {
  id        Int       @id @default(autoincrement())
  leagueId  Int       @unique
  name      String
  logo      String
  type      String
  country   String
  season    String
  market    Markets @relation(fields: [marketId],references: [id],onDelete: Cascade)
  marketId  Int @default(1)
  fixtures  Fixture[] @relation()
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("league")
}

model Team {
  id           Int       @id @default(autoincrement())
  teamId       Int       @unique
  name         String
  code         String
  logo         String
  venue        String
  homeFixtures Fixture[] @relation(name: "HomeFixtures")
  awayFixtures Fixture[] @relation(name: "AwayFixtures")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("team")
}

model Fixture {
  id            Int            @id @default(autoincrement())
  fixtureId     Int            @unique
  date          DateTime
  referee       String
  status        MATCHSTATUS
  league        League         @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  leagueId      Int
  homeTeam      Team           @relation(name: "HomeFixtures", fields: [homeTeamId], references: [id], onDelete: Cascade)
  homeTeamId    Int
  awayTeam      Team           @relation(name: "AwayFixtures", fields: [awayTeamId], references: [id], onDelete: Cascade)
  awayTeamId    Int
  fixtureResult FIXTURERESULT  @default(NP)
  result        FixtureResult? @relation()
  odds          Odds []          @relation()
  shortStatus   String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([leagueId])
  @@map("fixture")
}

model FixtureResult {
  id             Int     @id @default(autoincrement())
  homeGoals      Int?
  awayGoals      Int?
  htHomeGoals    Int?
  htAwayGoals    Int?
  extraHomeGoals Int?
  extraAwayGoals Int?
  fixture        Fixture @relation(fields: [fixtureId], references: [id], onDelete: Cascade)
  fixtureId      Int     @unique

  @@map("fixtureresults")
}

model Odds {
  id        Int             @id @default(autoincrement())
  name      String
  value     String?
  odd       Float           @default(1.0)
  type      OddType
  fixture   Fixture         @relation(fields: [fixtureId], references: [id], onDelete: Cascade)
  fixtureId Int             
  betSlips  BetMarketOdds[] @relation()
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("odds")
}

model Transaction {
  id                Int               @id @default(autoincrement())
  amount            Float
  type              TRANSACTIONTYPE
  status            TRANSACTIONSTATUS
  date              DateTime
  checkoutRequestId String?
  merchantRequestId String?
  transactionId     String
  phone             String?
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@unique([checkoutRequestId, merchantRequestId])
}

enum TRANSACTIONSTATUS {
  PENDING
  SUCCESS
  FAILED
}

enum TRANSACTIONTYPE {
  DEPOSIT
  WITHDRAWAL
  BONUS
}

enum OddType {
  WINNER_FT
  WINNER_HT
  WINNER_2HT
  OVER_UNDER_HT
  OVER_UNDER_2HT
  OVER_UNDER_FT
  HALTIME_HOME_WIN
  HALFTIME_AWAY_WIN  
  DOUBLE_CHANCE
  HALFTIME_FULLTIME
  EXACT_SCORE_FT
  EXACT_SCORE_HT
  HOME_ODD_EVEN
  AWAY_ODD_EVEN
  FT_ODD_EVEN
  HALF_ODD_EVEN
  FIRST_TO_SCORE
  HOME_OR_AWAY
  BOTH_TEAM_SCORE
  OVER_HOME
  OVER_AWAY
  TOTAL_GOALS
  TOTAL_GOALS_HOME
  TOTAL_GOALS_AWAY

}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum MATCHSTATUS {
  FINISHED
  UPCOMMING
  ABANDONED
  INPLAY
  CANCELLED
}

enum FIXTURERESULT {
  HOME
  AWAY
  DRAW
  NP // NOT PLAYED
}

enum BETSTATUS {
  WON
  LOST
  VOID
  PENDING
  CANCELLED
}
